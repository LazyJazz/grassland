name: Windows Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [self-hosted, Windows, Vulkan]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install vcpkg
        run: ${{github.workspace}}\external\vcpkg\bootstrap-vcpkg.bat

      - name: Install packages
        run: ${{github.workspace}}\external\vcpkg\vcpkg install

      - name: Configure CMake & Build MSVC
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: ${{github.workspace}}/.github/test/windows-cmake-msvc.bat ${{github.workspace}} ${{env.BUILD_TYPE}}

      - name: Configure CMake & Build Clang
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: ${{github.workspace}}/.github/test/windows-cmake-clang.bat ${{github.workspace}} ${{env.BUILD_TYPE}}
