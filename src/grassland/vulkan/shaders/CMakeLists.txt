
# Define function XXD, use xxd.ps1 on Windows, xxd on Linux
# Usage XXD(<input_file> <output_file>)

if (WIN32)
    # Define a cmake function XXD
    function(XXD input_file output_file)
        add_custom_command(
                OUTPUT ${output_file}
                COMMAND powershell -ExecutionPolicy Bypass -File ${GRASSLAND_SOURCE_DIR}/scripts/xxd.ps1 ${input_file} ${output_file}
                COMMAND ${CMAKE_COMMAND} -E echo "Generating ${output_file} from ${input_file}"
                DEPENDS ${input_file}
        )
    endfunction()
else ()
    # Define a cmake function XXD for Unix-Like systems
    function(XXD input_file output_file)
        add_custom_command(
                OUTPUT ${output_file}
                COMMAND xxd -i ${input_file} ${output_file}
                COMMAND ${CMAKE_COMMAND} -E echo "Generating ${output_file} from ${input_file}"
                DEPENDS ${input_file}
        )
    endfunction()
endif ()


# Find all the shader files under current directory
file(GLOB_RECURSE SHADER_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/*.vert
    ${CMAKE_CURRENT_SOURCE_DIR}/*.frag
    ${CMAKE_CURRENT_SOURCE_DIR}/*.comp
    ${CMAKE_CURRENT_SOURCE_DIR}/*.geom
    ${CMAKE_CURRENT_SOURCE_DIR}/*.rgen
    ${CMAKE_CURRENT_SOURCE_DIR}/*.rchit
    ${CMAKE_CURRENT_SOURCE_DIR}/*.rmiss
    ${CMAKE_CURRENT_SOURCE_DIR}/*.glsl
)

# Use the XXD cmake function generate header files in corresponding build directory
foreach(SHADER_FILE ${SHADER_FILES})
    get_filename_component(FILE_NAME ${SHADER_FILE} NAME)
    set(HEADER_FILE ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}.h)
    XXD(${SHADER_FILE} ${HEADER_FILE})
    list(APPEND HEADER_FILES ${HEADER_FILE})
endforeach()

# Add the generated header files to the target
target_sources(grassland_vulkan_lib PRIVATE ${HEADER_FILES})

# The custom command should be executed before the target is built
add_custom_target(
    grassland_vulkan_shader_files ALL
    DEPENDS ${HEADER_FILES}
)

add_dependencies(grassland_vulkan_lib grassland_vulkan_shader_files)

# Output the generated header files to built_in_shaders.inl in form #include<PATH_HEADER>

# Get the relative path of the generated header files
foreach(HEADER_FILE ${HEADER_FILES})
    file(RELATIVE_PATH RELATIVE_HEADER_FILE ${CMAKE_CURRENT_BINARY_DIR} ${HEADER_FILE})
    list(APPEND RELATIVE_HEADER_FILES ${RELATIVE_HEADER_FILE})
endforeach()

# Generate the built_in_shaders.inl
set(BUILT_IN_SHADERS_INL ${CMAKE_CURRENT_BINARY_DIR}/built_in_shaders.inl)
file(WRITE ${BUILT_IN_SHADERS_INL} "// This file is generated by CMake\n")
foreach(RELATIVE_HEADER_FILE ${RELATIVE_HEADER_FILES})
    file(APPEND ${BUILT_IN_SHADERS_INL} "#include \"${RELATIVE_HEADER_FILE}\"\n")
endforeach()

target_sources(grassland_vulkan_lib PRIVATE ${BUILT_IN_SHADERS_INL})
target_include_directories(grassland_vulkan_lib PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
