
# Define function XXD, use xxd.ps1 on Windows, xxd on Linux
# Usage XXD(<input_file> <output_file>)

if (WIN32)
    # Define a cmake function XXD
    function(XXD input_file output_file)
        add_custom_command(
                OUTPUT ${output_file}
                COMMAND powershell -ExecutionPolicy Bypass -File ${GRASSLAND_SOURCE_DIR}/scripts/xxd.ps1 ${input_file} ${output_file}
                COMMAND ${CMAKE_COMMAND} -E echo "Generating ${output_file} from ${input_file}"
                DEPENDS ${input_file}
        )
    endfunction()
else ()
    # Define a cmake function XXD for Unix-Like systems
    # Run in the directory with file name as input file only
    function(XXD input_file output_file)
        # Seperate directory and file name
        get_filename_component(FILE_NAME ${input_file} NAME)
        # Get the directory of the input file
        get_filename_component(DIR_NAME ${input_file} DIRECTORY)
        # Add command with relative path
        add_custom_command(
                OUTPUT ${output_file}
                COMMAND xxd -i ${FILE_NAME} ${output_file}
                COMMAND ${CMAKE_COMMAND} -E echo "Generating ${output_file} from ${input_file}"
                WORKING_DIRECTORY ${DIR_NAME}
                DEPENDS ${input_file}
        )
    endfunction()
endif ()


file(GLOB_RECURSE SHADER_INCLUDE_FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/*.glsl
)

function(flatten_glsl_shader input_file output_file)
    add_custom_command(
            OUTPUT ${output_file}
            COMMAND ${Python3_EXECUTABLE} ${GRASSLAND_SOURCE_DIR}/scripts/flatten_glsl.py ${input_file} ${output_file}
            DEPENDS ${input_file} ${SHADER_INCLUDE_FILES}
            COMMENT "Flattening GLSL shader: ${input_file} -> ${output_file}"
    )
endfunction()


# Find all the shader files under current directory
file(GLOB_RECURSE SHADER_FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/*.vert
        ${CMAKE_CURRENT_SOURCE_DIR}/*.frag
        ${CMAKE_CURRENT_SOURCE_DIR}/*.comp
        ${CMAKE_CURRENT_SOURCE_DIR}/*.geom
        ${CMAKE_CURRENT_SOURCE_DIR}/*.rgen
        ${CMAKE_CURRENT_SOURCE_DIR}/*.rchit
        ${CMAKE_CURRENT_SOURCE_DIR}/*.rmiss
)

# Flatten all the shader files
foreach (SHADER_FILE ${SHADER_FILES})
    get_filename_component(FILE_NAME ${SHADER_FILE} NAME)
    set(FLATTENED_SHADER_FILE ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME})
    flatten_glsl_shader(${SHADER_FILE} ${FLATTENED_SHADER_FILE} ${SHADER_INCLUDE_FILES})
    list(APPEND FLATTENED_SHADER_FILES ${FLATTENED_SHADER_FILE})
endforeach ()

# Make the flattened shaders a target
add_custom_target(
        grassland_vulkan_flattened_shaders ALL
        DEPENDS ${FLATTENED_SHADER_FILES}
)

add_dependencies(grassland_vulkan_lib grassland_vulkan_flattened_shaders)


# Use the XXD cmake function generate header files in corresponding build directory
foreach (SHADER_FILE ${SHADER_FILES})
    get_filename_component(FILE_NAME ${SHADER_FILE} NAME)
    set(HEADER_FILE ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}.h)
    # Use the corresponding flattened shader file as input
    get_filename_component(FLATTENED_SHADER_FILE ${SHADER_FILE} NAME)
    set(FLATTENED_SHADER_FILE ${CMAKE_CURRENT_BINARY_DIR}/${FLATTENED_SHADER_FILE})
    XXD(${FLATTENED_SHADER_FILE} ${HEADER_FILE})
    list(APPEND HEADER_FILES ${HEADER_FILE})
endforeach ()

# Add the generated header files to the target
target_sources(grassland_vulkan_lib PRIVATE ${HEADER_FILES})

# The custom command should be executed before the target is built
add_custom_target(
        grassland_vulkan_shader_files ALL
        DEPENDS ${HEADER_FILES}
)

add_dependencies(grassland_vulkan_lib grassland_vulkan_shader_files)

# Output the generated header files to built_in_shaders.inl in form #include<PATH_HEADER>

# Get the relative path of the generated header files
foreach (HEADER_FILE ${HEADER_FILES})
    file(RELATIVE_PATH RELATIVE_HEADER_FILE ${CMAKE_CURRENT_BINARY_DIR} ${HEADER_FILE})
    list(APPEND RELATIVE_HEADER_FILES ${RELATIVE_HEADER_FILE})
endforeach ()

# Generate the built_in_shaders.inl
set(BUILT_IN_SHADERS_INL ${CMAKE_CURRENT_BINARY_DIR}/built_in_shaders.inl)
file(WRITE ${BUILT_IN_SHADERS_INL} "// This file is generated by CMake\n")
foreach (RELATIVE_HEADER_FILE ${RELATIVE_HEADER_FILES})
    file(APPEND ${BUILT_IN_SHADERS_INL} "#include \"${RELATIVE_HEADER_FILE}\"\n")
endforeach ()

# List all the shader info in a map std::map<std::string, std::pair<const char *, unsigned int>>, generate a global variable
file(APPEND ${BUILT_IN_SHADERS_INL} "\n")
file(APPEND ${BUILT_IN_SHADERS_INL} "std::map<std::string, std::pair<const char *, unsigned int>> shader_list = {\n")
foreach (SHADER_FILE ${SHADER_FILES})
    get_filename_component(FILE_NAME ${SHADER_FILE} NAME)
    # Get variable name
    string(REPLACE "." "_" VAR_NAME ${FILE_NAME})
    # Reintercast the variable name to const char *
    file(APPEND ${BUILT_IN_SHADERS_INL} "    {\"${FILE_NAME}\", {reinterpret_cast<const char *>(${VAR_NAME}), ${VAR_NAME}_len}},\n")
endforeach ()
file(APPEND ${BUILT_IN_SHADERS_INL} "};\n")


# Generate a function GetShaderCode in built_in_shaders.inl, input is the file name, output is the shader code, both are string
file(APPEND ${BUILT_IN_SHADERS_INL} "\n")
file(APPEND ${BUILT_IN_SHADERS_INL} "std::string GetShaderCode(const std::string& file_name) {\n")
file(APPEND ${BUILT_IN_SHADERS_INL} "    return std::string(shader_list[file_name].first, shader_list[file_name].second);\n")
file(APPEND ${BUILT_IN_SHADERS_INL} "}\n")


target_sources(grassland_vulkan_lib PRIVATE ${BUILT_IN_SHADERS_INL})
target_include_directories(grassland_vulkan_lib PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
